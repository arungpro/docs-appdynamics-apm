---
title: MultiBuildPack for Java Applications
owner: Partners
---

AppDynamics Application Performance Monitoring for Pivotal Cloud Foundry (PCF) v4.5.556 and later
includes an AppDynamics extension buildpack `appdbuildpack` that can be used with
the Cloud Foundry Java buildpack.

<p class="note"><strong>Note:</strong>
The <code>appdbuildpack</code> is designed to work with the standard Java buildpack.
However, you must use the forked version of the buildpack until it is merged
into the Cloud Foundry Java buildpack. For more information, see the
<a href="https://github.com/Appdynamics/java-buildpack.git">Appdynamics/java-buildpack</a>
GitHub repository.</p>

## <a id='Prerequistite'></a> Prerequisite

Install or upgrade to v4.5.556 AppDynamics Application Performance Monitoring for PCF.

## <a id='Workflow'></a> Add the AppDynamics Extension and Java Buildpacks

Add the AppDynamics Extension buildpack and the forked Java buildpack
to your `manifest.yml` before pushing an app:

1. To verify that `appdbuildpack` is present, run the following command:
    <pre class='terminal'>
    $ cf buildpacks
    Getting buildpacks...

    buildpack                        position   enabled   locked   filename                                             stack
    appdbuildpack                    13         true      false    appdynamics_buildpack-v4.5.556.zip
    </pre>

2. Edit your `manifest.yml` file as follows:
     - Set `buildpacks` to `appdbuildpack` and `https://github.com/Appdynamics/java-buildpack.git`
     - Set `services` to your AppDynamics APM for PCF instance.
     In this example `services` is set to`appd`.
     - Set the environment variable `APPD_AGENT` to `java`.

    For example:
    <pre class='terminal'>
        ---
        applications:
        - name: spring-music
        memory: 1G
        random-route: true
        path: build/libs/cf-java-sample-1.0.jar
        buildpacks:
        - appdbuildpack
        - https<scan>:</scan>//github.com/Appdynamics/java-buildpack.git
        env:
        APPD_AGENT: java
        services:
        - appd
    </pre>

3.  Push the app.
    <pre class='terminal'>
    $ cf push
    </pre>


Using `appdbuildpack` with `java_buildpack` filters sensitive information reported in
the `VCAP_*` environment variables.


## <a id='Advanced-Configuration'></a> Advanced Configuration

The AppDynamics Extension buildpack facilitates advanced configuration of AppDynamics Java Agent.



1. Create a folder named `appdynamics/conf`.

1. In `appdynamics/conf` add one or more of the following advanced configuration:
    - `app-agent-config.xml`
    - `controller-info.xml`
    - `custom-activity-correlation.xml`
    - `service-endpoints.xml`
    - `transactions.xml`
    - `logging/log4j2.xml`

    These are files which we would like to override to the artifact that is getting pushed (jar/war/zip file).

    For example, to add `appdynamics` to a jar file, do the following:
    <pre class='terminal'>
    $ jar -uf build/libs/cf-java-sample-1.0.jar appdynamics
    </pre>

3. To verify that `appdynamics/conf` is in the artifact, run the following command:
    <pre class='terminal'>
    $jar -tf build/libs/cf-java-sample-1.0.jar | grep appdynamics
    appdynamics/
    appdynamics/conf/
    appdynamics/conf/transactions.xml
    appdynamics/conf/app-agent-config.xml
    appdynamics/conf/custom-interceptors.xml
    </pre>

4. To push the app, follow [Add the AppDynamics Extension and Java Buildpacks](#Workflow) above.
