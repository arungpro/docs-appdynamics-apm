---
title: AppDynamics Extension Buildpack (MultiBuildpack Approach)
owner: Partners
---

Starting with version v4.6.x of the tile AppDynamics Application Performance Monitoring for PCF we will be shipping an AppDynamics extension buildpack <b>appdbuildpack</b> that can be used in tandem with standard build packs using cloud foundry's multi buildpack workflow. The buildpack serves as a single point for AppDynamics APM support.

## <a id='Prerequistites'></a> Prerequisites

  1. Must use cf CLI v6.38 or later for using multi buildpacks.

## <a id='Workflow'></a> Workflow

1. Install/Upgrade AppDynamics Application Performance Monitoring for PCF tile version v4.6.x or later.  No additional configuration is needed!

2. Once the tile is installed a buildpack with name <b>appdbuildpack</b> should be available to you in your cf environment buildpacks
    <pre class='terminal'>
    $ cf buildpacks
    Getting buildpacks...

    buildpack                position   enabled   locked   filename                                             stack
    meta_buildpack           1          true      false    meta_buildpack-v1.1.0.zip
    ...
    appdbuildpack            25         true      false    AppDynamics_buildpack-v4.6.10.zip
    </pre>

3. Edit the following sections of application's `manifest.yml`

    1. include `appdbuildpack` extension buildpack to the `buildpacks` section as show below

    ~~~yaml
      buildpacks:
        - appdbuildpack
        - <langauge specific buildpack>
    ~~~

    1.  set `APPD_AGENT` environment variable corresponding to the language of the application in `env` section as show below

    ~~~yaml
      env:
        APPD_AGENT: dotnet
    ~~~

    1. bind the application to AppDynamics service instance, by including it in `services` section as below

    ~~~yaml
      services:
       - appd
    ~~~


4. Push your application using `cf push`
    <pre class='terminal'>
    $ cf push
    </pre>


## <a id='APPD_AGENT'></a> APPD_AGENT values
| Language  | Standard BuildPack   |  APPD_AGENT value  |
| ------------ | ------------ | ------------ |
| DotNet Framework (Windows)  | hwc_buildpack   | dotnet   |
| DotNet Core (Linux)  | dotnet_core_buildpack  | dotnet-linux  |
| DotNet Core (Windows)  | binary_buildpack  | dotnet-windows  |
| Python  |  python_buidpack | python |
| GoLang  | go_buildpack  | golang  |


## <a id='Advanced Features'></a> Advanced Features
AppDynamics extension buildpack supports configurable environment variables to customize fetching agent binaries and overriding agent configuration

### <a id='Overriding Agent Binary Downloads'></a> Overriding Agent Binary Downloads
By default `appdbuildpack` tries to fetch the corresponding AppDynamics agent from standard langauge specific repositories (e.g: NuGet for .NET, PyPI for Python, npm for node.js etc).

To override this behavior, set the environment variable `APPD_AGENT_HTTP_URL` to a custom http url where the binaries are hosted. `appdbuildpack` downloads the agent bits from that url and installs the agent.

~~~yaml
  env:
    APPD_AGENT: dotnet
    APPD_AGENT_HTTP_URL: http://custom-http.server.com/dotnet/4_5_7_0/AppDynamics-DotNetCore-linux-x64-4.5.7.0.zip

~~~


### <a id='Overriding Agent Configuration'></a> Extending Agent Configuration

By default `appdbuildpack` configures the basic configuration needed by the AppDynamics agent to instrument the application. This includes application AppDynamics name, tier, node and controller information.

`appdbuildpack` facilitates adding additional configuration to the agents or overriding existing default configuration. To acheive this, set the `APPD_CONF_HTTP_URL` environment variable to a custom http url where advanced agent configuration files are hosted. The extension buildpack downloads the relevant files related to the AppDynamics agent and extends the agent configuration.

~~~yaml
  env:
    APPD_AGENT: dotnet
    APPD_CONF_HTTP_URL: http://custom-http.server.com/dotnet/conf/v1

~~~

Notes:

1. `APPD_CONF_HTTP_URL` must point to the location of the folder, not the file location. In the above example, advanced configuration files of AppDynamics DotNet Agent (e.g: `AppDynamicsAgentLog.config`) are hosted under conf/v1 folder.

1. `appdbuildpack` will only fetch the files with relevant names that are applicable to the agent. In the above example, since it is a dotnet agent, only files `AppDynamicsAgentLog.config` and `AppDynamicsConfig.json` are downloaded, if present, under `http://custom-http.server.com/dotnet/conf/v1`. All other files are ignored.

1. Refer [AppDynamics documentation](https://docs.appdynamics.com/display/PRO45/Install+App+Server+Agents) for the names and formats of the advanced configuration files applicable to each of the AppDynamics agents.



## <a id='Sample manifest.yml'></a> Sample manifest.yml

~~~yaml
---
applications:
- name: cf-net-linux
  random-route: true
  memory: 1G
  buildpacks:
    - appdbuildpack
    - dotnet_core_buildpack
  env:
    APPD_AGENT: dotnetcore
    APPD_AGENT_HTTP_URL: http://cf-app.com/dotnetcore/1/AppDynamics-DotNetCore-linux-x64-4.5.7.0.zip
    APPD_CONF_HTTP_URL: http://custom-http.server.com/dotnet/conf/v1
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  services:
    - appd

~~~


## <a id='Why this Design'></a> Advantages using this approach

1. Clear seperation of responsibilities between `appdbuildpack` and the standard system buildpacks. `appdbuildpack` is now solely responsible for anything related to AppDynamics intrumentation.

2. Any new features related to AppDynamics will be shipped through `appdbuildpack`. This significantly reduces the turn around time when compared to shipping AppDynamics bits through standard buildpacks.

3. A single unified workflow to instrument variety of applications regardless of the language/framework of the application. Any new feature added to appdbuildpack (if applicable) is available across all langauge agents since `appdbuildpack` is the sole source of AppDynamics instrumentation logic.



## <a id='Sample Application'></a> Sample Application

As always, you can find sample applications demostrating  multi buildpack approach in our GitHub space.
https://github.com/AppDynamics/cloudfoundry-apps
