---
title:  Documentation for older releases
owner: Partners
---


##<a id='Old releases'></a>Older releases


### <a id='version'></a>v1.2.4

**Release Date: January 8, 2018**

Features included in this release:

 - Fix for insufficient memory when using Java Buildpack 4.0+
 - DB agent upgraded to `4.2.15.18`

This topic describes how to upgrade to v1.2.3 of the AppDynamics APM tile for Pivotal Cloud Foundry (PCF).

  
### <a id='version'></a>v1.2.3

**Release Date: October 2, 2017**

Features included in this release:

 - Fix for insufficient memory when using Java Buildpack 4.0+
### <a id='version'></a>v1.2.2

**Release Date: September 22, 2017**

Features included in this release:

 - Updates to stemcell 3445 to patch Ubuntu Linux kernel security vulnerability (USN-3385-2)
  

### <a id='version'></a>v1.2.1

**Release Date: May 16, 2017**

Features included in this release:

 - Fix for CVE-2017-4975
 - Update stem cell version to **3363.22**
 
 ### <a id='version'></a>v1.2.0

**Release Date: February 1, 2017**

Features included in this release:

 - Customize YAML file to specify which metrics to pull in from JMX bridge
 - Update stem cell version to v**3262.22**
 
 
### <a id='version'></a>v1.1.2

**Release Date: September 8, 2016**

Features included in this release:

 - Fixed bug in destroy-analytics-agent errand which prevented clean deletion of v1.1.1 of tile
 - Updated the stem cell version to v**3146.20**
 - UI changes to the tile
 
### <a id='version'></a>v1.1.1

**Release Date: July 26, 2016**

Features included in this release:

 - Added support for AppDynamics **Database Monitoring**
 - Added support for AppDynamics **Transaction Analytics**
 - **Web Proxy Config** is now a separate configuration tab
 - Updated the stem cell version to **3146.12**


### <a id='version'></a>v1.0.1

**Release Date: February 20, 2016**

Features included in this release:

 - Updated stemcell to v3146.9
 - Fixed machine agent related issue for multiple PCF installations
 - TierName, NodeName and UniqueHostID suffixed with DomainName
 - Support for **OpenTSDB Firehose Nozzle**; support for all Cloud Foundry deployment metrics
 
 
 This document describes how to configure an analytics agent and view transaction analytics on the AppDynamics controller.

## <a id="Analytics"></a>Analytics

 - Transaction Analytics feature is supported on v1.1.1 and later.
 - If your AppDynamics controller has license for Analytics monitoring, you can monitor application analytics.
 - Supported Analytics Agent version: **4.1.8.0**.
 - Applications supported on Analytics Agent: **Java, .NET**.
 - The analytics agent is compatible with controller version 4.1.8.0 and above.

## <a id="understand"></a>Understand Transaction Analytics

### <a id="overview"></a>Overview

The application agent forwards analytics data to the analytics agent, which sends the data to the event service. The controller queries the event service to fetch the analytics data and renders it on the controller dashboard. 

![Analytics Agent Working](../images/pdf1.png)

 - **AppDynamics App Agent**: Application Analytics relies on the same app agents that AppDynamics APM uses. If you already use AppDynamics APM, you likely already have these deployed to your monitored applications.
 - **Analytics Agent**: The Analytics Agent collects data from one or more app agents and sends it to the Events Service.
 - **Analytics Plugin** (AP) to the app agent: The Analytics Plugin extends app agent functionality so that it can collect and forward data to the Analytics Agent.
 - **Event Service**: The event service is an unstructured document store which acts as a place holder for analytics data. If you do not already have an event service running, contact AppDynamics support to get one.
 - **Controller**: The controller queries the event service and renders analytics data to the controller dashboard.
 
### <a id="multi-node"></a>Deploying Analytics Agents to Multiple Nodes

A real-world scenario is unlikely to consist of a single monitored node, as shown in the diagram above. It usually consists of many applications deployed over many hosts.

There must be at least one Analytics Agent in the monitored environment, although multiple agent plugins collecting only transaction data can share a single Analytics Agent, as shown below:

![Realworld Scenario](../images/pdf2.png)

In this example, AppServerHost1-3 collect only transaction data, and only app agents are required. Each one connects to the Analytics Agent on AppServerHost4. The analytics agent forwards the transaction analytics data to the event service. Finally, the controller fetches the analytics data from the event service and renders it to the controller analytics dashboard.
 
Follow the steps below to configure Transaction Analytics for your PCF applications.

## <a id="step1"></a>Step 1: Configure Tile for Analytics

1. In the **Analytics Agent** section of the AppDynamics tile, choose **Enable** under **Enable Transaction Analytics**.
  ![Analytics Config For Tile GUI](../images/Analytics1.png)  

1. Paste in the **Global Account Name** and **Access Key** from the AppDynamics Controller license page. 
  ![License Page](../images/Analytics2.png)

1. Specify the AppDynamics **Analytics Event Service URL** if you already have one. If you do not have one, contact AppDynamics support. The Analytics Event Service URL is in the following format: `http://analytics-event-service.com:80`.

1. Click **Save**.

1. After the tile updates successfully, you can verify that each analytics agent runs as a CF application in the **AppDynamicsPCFOpsMetrics-service-org** org. The name of each analytics agent is **AppDynamicsAnalytics**, with a route `appdynamics-analytics.DOMAIN-NAME`. See the following example:
    <pre class="terminal">
    $ cf target -o AppDynamicsPCFOpsMetrics-service-org
    $ cf apps
    Getting apps in org AppDynamicsPCFOpsMetrics-service-org / space AppDynamicsPCFOpsMetrics-service-space as admin...
    OK
    name                       requested state   instances   memory   disk   url</pre>		                                      																																									      	

## <a id="step2"></a>Step 2: Bind Application to Analytics Agent

After deploying the tile, follow the steps below to bind an application with the analytics agent to collect analytics data.

<p class="note"><strong>Note:</strong> The analytics agent is compatible with Java and .NET applications.</p>

1. Set a JAVA system property on the application to forward data to analytics agent.
    <pre class="terminal">$ cf set-env TARGET-APP-NAME JAVA_OPTS "-Dappdynamics.analytics.agent.url=<span>http:</span>//appdynamics-analytics.DOMAIN-NAME/v1/sinks/bt"</pre>
    In the example above, `http://appdynamics-analytics.DOMAIN-NAME` is the URL of the analytics agent running in the **AppDynamicsPCFOpsMetrics-service-org** org.

1. Restage the application for the changes to take effect.
    <pre class="terminal">$ cf restage TARGET-APP-NAME</pre> 

## <a id="step3"></a>Step 3: Configure Controller to Fetch Data from Event Service

 - **For customers using SaaS controllers**: Your controller is already configured to fetch data from a SaaS event service.
 - **For customers using an on-premise controller**: Log in to your controller as an admin and configure the event service URL and controller key for authentication, as shown below.

![AdminPage](../images/ControllerAdminForAnalytics.png)

For help with this configuration, contact AppDynamics support.

## <a id="step4"></a>Step 4: Configure Analytics Collector on the Controller

On your AppDynamics controller, follow these steps to configure the analytics collector for a target application.

1. Click **Analytics**. 
  ![ConfigureAnalyticsCollector](../images/Analytics3.png) 

1. From the **Configure Analytics for Applications** drop-down, choose the same target application for which you set the JAVA system property in the previous step. 

1. Select the checkbox to enable analytics data. 

1. Add transactions for which you wish to report analytics data.
  ![enter image description here](../images/Analytics4.png) 

1. (Optional) Configure the **HTTP Data Collectors** and **Transactions for GUID Injection** fields. For more information, see the AppDynamics documentation:    
  - [Configure HTTP Data Collectors](https://docs.appdynamics.com/display/PRO42/Configuring+Transaction+Analytics): This enables collection of additional business data using HTTP Data Collectors.
  - [Configure Transactions for GUID Injection](https://docs.appdynamics.com/display/PRO42/Business+Transaction+and+Log+Correlation): By configuring business transactions for GUID Injection, you can correlate logs to specific business transaction requests. This can be helpful when you see slow transactions and the call graph does not give you enough information to get to the root cause. You can use this feature to get the full context related to a failed or slow transaction.
   ![Optional Fields](../images/Analytics5.png) 

## <a id="step5"></a> Step 5: Analyze Business Transactions Using Analytics

1. Generate some traffic for your application. 

1. Click **Analytics** on your AppDynamics controller.
  ![Analytics Tab](../images/Analytics7.png) 

1. Click **Add** to see a list of all configured business transactions.
  ![Analytics Data](../images/Analytics8.png)
 

This document describes how to configure a database agent and see database metrics on the AppDynamics controller.

## <a id="DataBaseMonitoring"></a>DataBaseMonitoring

 - If your AppDynamics controller has license for Database monitoring, you can monitor databases in PCF.
 - Supported database agent **v4.2.15.18**
 - Supported databases: 
  ![DBSupport](../images/DBSupport.png)
 - The database agent and controller compatibility is decided on the agent version. If you are using agent v4.2.15.18, the controller should be on version v4.2.x or higher.

## <a id="agent"></a>Step 1: Configure Tile for Database Agent

1. You can configure any service plan to deploy database agents. To configure a database agent, do the following:
  1. Select the **Enable Database Monitoring** checkbox. 
  1. Specify a supported database agent version.
  1. Specify the number of database agents to deploy for the service plan.
  1. Click **Save**.  
  
1. After the tile installs, you can verify that each database agent runs as a Cloud Foundry (CF) application within the `AppDynamics-DB-Visibility` org. The name of each database agent application is `DBAgent-SERVICE_PLAN_NAME-INDEX`. See the following example:
      <pre class="terminal">
      $ cf target -o AppDynamics-DB-Visibility 
      $ cf apps 
      Getting apps in org AppDynamics-DB-Visibility / space AppDynamics-DB-Visibility-space as admin... 
      OK 
      name     requested      state      instances    memory         disk     urls 
      DBAgent-svcplan-1    started     1/1     1&nbsp;G     1&nbsp;G 
      DBAgent-svcplan-2    started     1/1     1&nbsp;G     1&nbsp;G</pre>
      Here, `svcplan` is the name of the service plan configured to deploy two DB agents. 

## <a id="collector"></a>Step 2: Configure Database Collector

The database agent and the AppDynamics controller work together to monitor a database. The agent collects the data from the database server and passes it to the AppDynamics Controller for interpretation and display in the Controller UI. The database agent does not need to be installed on the same system hosting the database server.

<p class="note"><strong>Note</strong>: Because each database agent starts with 1&nbsp;G of memory, AppDynamics reccommends configuring at most two DB collectors for each database agent app running in Pivotal Cloud Foundry (PCF).</p>

1. Open the AppDynamics controller and go to **Databases > Configuration > Collectors**.
  ![Database collector](../images/Database2.png) 

1. Configure a database collector using the [Configure Database Collectors](https://docs.appdynamics.com/display/PRO41/Configure+Database+Collectors) topic from the AppDynamics docs.
  - For the **Database Agent** field in every collector, select the database agent name deployed in PCF. In the example image below, you choose **DBAgent-PCF-Public-Controller-1** as the **Database Agent** and not **Default DB Agent**.
    ![CollectorConfig](../images/Database3.png) 
1. Once you configure and save the collector, generate some traffic on an application that includes database operations. After a couple of minutes, you can see database traffic on your AppDynamics Database Dashboard.
![DatabaseTraffic](../images/Database4.png)


 
 
