---
title: Using AppDynamics
owner: Partners
---

This topic describes how to push and bind an application to an AppDynamics tile.


## <a id='before-you-start'></a> Before You Start

1. Create a [Pivotal Network](https://network.pivotal.io) account if you do not have one.

1. Install the Cloud Foundry Command Line Interface (cf CLI). See [Installing the cf CLI](https://docs.pivotal.io/pivotalcf/2-1/cf-cli/install-go-cli.html).


## <a id='log-in-to-pivotal-cli'></a> Log In to the Pivotal CLI

1. Open a cf CLI or command-prompt window.

1. Identify your Pivotal API endpoint and version. Enter the following command:
  <pre class='terminal'>$ cf api</pre>
  You should see the following output:
  <pre class='terminal'>
  api endpoint: https://api.my.pivotal.io
  api version: 2.103.0
  </pre>

1. Log in to the Pivotal endpoint:
  <pre class='terminal'>cf login</pre>

1. Enter your email address and Pivotal password when prompted.

1. Follow the workflow referenced in the following table, based on the type of app you are monitoring.

|  Language |Workflow | Cloud Foundry Buildpack |
|---|---|---|
| Java  | [Java Application Workflow](https://docs.appdynamics.com/display/PCF/Java+Application+in+PCF+-+Monitoring+Workflow) | [Java buildpack](https://github.com/cloudfoundry/java-buildpack)  |
| .NET  | [.NET Application Workflow](https://docs.appdynamics.com/display/PCF/.NET+Application+in+PCF+-+Monitoring+Workflow)  | [.NET buildpack](https://github.com/Appdynamics/hwc-buildpack) |
| PHP  | [PHP Application Workflow](https://docs.appdynamics.com/display/PCF/PHP+Application+in+PCF+-+Monitoring+Workflow) | [PHP buildpack] (https://github.com/cloudfoundry/php-buildpack)  |
| Python  | [Python Application Workflow](https://docs.appdynamics.com/display/PCF/PHP+Application+in+PCF+-+Monitoring+Workflow) | [Python buildpack] (https://github.com/cloudfoundry/python-buildpack#develop)  |
| NodeJS | | [NodeJS buildpack] (https://github.com/cloudfoundry/nodejs-buildpack)  |
|  Go | [Go Application Workflow](https://github.com/Appdynamics/cloudfoundry-apps/tree/master/cf-go) | [Go Cloud Foundry buildpack] (https://github.com/cloudfoundry/go-buildpack)  |

AppDynamics supports a set of [sample applications](https://github.com/Appdynamics/cloudfoundry-apps) that you can use with these workflows.

<!--
###  * TODO -- <!--  TBD pavan to provide link to .NET buildpack
-->

## <a id='customize-names'></a> Customizing App, Tier, and Node Names

AppDynamics Buildpacks auto-generate App/Tier/Node names by looking into the deployed environment. To customize this auto-generation, you can enter `cf set-env {APP} {ENVNAME} {ENVVALUE}` to set the configuration environment variables.

| AGENT |	APPLICATION ENV VARIABLE |	TIER ENV VARIABLE |	NODE ENV VARIABLE |
| --- | --- | --- | --- |
| Python |	APPD_APP_NAME |	APPD_TIER_NAME |	APPD_NODE_NAME |
| Java |	APPDYNAMICS_AGENT_APPLICATION_NAME |	APPDYNAMICS_AGENT_TIER_NAME |	APPDYNAMICS_AGENT_NODE_NAME |
| NodeJS |	APPDYNAMICS_AGENT_APPLICATION_NAME|	APPDYNAMICS_AGENT_TIER_NAME | APPDYNAMICS_AGENT_NODE_NAME |
| Golang |	APPD_APP_NAME |	APPD_TIER_NAME |	APPD_NODE_NAME |


## <a id='setting-proxy-properties'></a> Extending the Default Configuration

If you are using a proxy server, the consumer application should specify the `http_proxy` or `https_proxy` as an environment variable for the application running on PCF to communicate with the proxy server. Do the following:

1. Set the environment variable for the application and the Controller.
   * For an HTTP proxy:
    <pre class='terminal'>cf set-env <app-name> http_proxy http://user@password:myproxy....:8080/</pre>
   * For an HTTPS proxy:
    <pre class='terminal'>cf set-env <app-name> https_proxy https://user@password:myproxy....:8080/</pre>

1. Restage the application:
    <pre class='terminal'>cf restage <app-name></pre>

1. Log in to the Controller web UI, navigate to the Metric Browser, and verify that the application is being detected and monitored.
